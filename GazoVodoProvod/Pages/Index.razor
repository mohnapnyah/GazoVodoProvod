@page "/"
@using GazoVodoProvod.Data
@using GazoVodoProvod.Pages
@using static GazoVodoProvod.Data.User
@inject NavigationManager navManager
@inject SingletonService singleton
<PageTitle>Enter</PageTitle>
<style>
	p.Message {
		background: #D9FFAD;
		color: green;
		padding: 2px;
	}
</style>

<center>
	<p class="Message">@Message</p>
	<p>
		Login
		<input type="text" name="login" @bind-value="@Login" />
	</p>
	<p>
	Pass
	<input type="password" @bind-value="@Password" />
	</p>
	<p>
		<button class="btn btn-primary" onclick="@LogIn">LogIn</button>
		<button class="btn btn-primary" onclick="@Registration">Registration</button>
		<button @onclick="AddDataDocumentTypes"></button>
	</p>
</center>

@code {
	public string Message = "";
	private string Login = "";
	private string Password = "";
	public void LogIn()
	{
		if (Login != "")
		{
			User autoUser = MongoDb.FindUser(Login);

			if (autoUser != null)
			{
				if (autoUser.Password == Password)
				{
					switch (autoUser.GetType().Name)
					{
						case("Customer"):
							navManager.NavigateTo("CustomerPage");
							break;
						case("Builder"):
							navManager.NavigateTo("BuilderPage");
							break;
						case("Designer"):
							navManager.NavigateTo("DesignerPage");
							break;
					}
					
					singleton.SetUser(autoUser);
				}
				else 
				{
					Message = "Password incorect. Pls check Password.";
				}
			}
			else 
			{
				Message = "This User not found. Pls check login.";
			}
		}
	}
	public void Registration()
	{
		navManager.NavigateTo("registration");
	}
	
    private void AddDataDocumentTypes()
    {
        DocumentType documentType = new DocumentType("Акт обследования и выбора трассы сети водоснабжения", Industries.WaterSupply, Roles.Developer);
        DocumentDB.AddDocumentTypeToDataBase(documentType);

        documentType = new DocumentType("Акт обследования и выбор места под проектируемую скважину", Industries.WaterSupply, Roles.Developer);
        DocumentDB.AddDocumentTypeToDataBase(documentType);

        documentType = new DocumentType("Согласованный ситуационный план (М1:10000 или М1: 25000) с нанесением источников воды(скважин, родников и т.п.), существующих водонапорных башен, предполагаемой трассой водопровода и места врезки в существующую сеть. ", Industries.WaterSupply, Roles.Developer);
        DocumentDB.AddDocumentTypeToDataBase(documentType);

            documentType = new DocumentType("План населённого пункта в М 1:1000 или М 1:500 топографическая съемка)", Industries.WaterSupply, Roles.Developer);
        DocumentDB.AddDocumentTypeToDataBase(documentType);

        documentType = new DocumentType("технические условия на водоснабжение", Industries.WaterSupply, Roles.Developer);
        DocumentDB.AddDocumentTypeToDataBase(documentType);

            documentType = new DocumentType("Технические условия на электроснабжение (для насосной станции первого или второго подъема)", Industries.WaterSupply, Roles.Developer);
        DocumentDB.AddDocumentTypeToDataBase(documentType);

        documentType = new DocumentType("Градостроительный план земельного участка", Industries.WaterSupply, Roles.Developer);
        DocumentDB.AddDocumentTypeToDataBase(documentType);

            documentType = new DocumentType("Справка согласования с собственниками земельных участков", Industries.WaterSupply, Roles.Developer);
        DocumentDB.AddDocumentTypeToDataBase(documentType);

            documentType = new DocumentType("документ, подтверждающий проведение межевания с присвоением кадастрового номера земельного участка под строительство водопровода и сооружений на нем.", Industries.WaterSupply, Roles.Developer);
        DocumentDB.AddDocumentTypeToDataBase(documentType);

            documentType = new DocumentType("заключение Органа Роспотребнадзора санитарно - эпидемиологической службы по отводу земельного участка и результат радиационного обследования.", Industries.WaterSupply, Roles.Developer);
        DocumentDB.AddDocumentTypeToDataBase(documentType);

            documentType = new DocumentType("Сведения о наличие водозаборных скважин (родников) на территории хозяйства. ", Industries.WaterSupply, Roles.Developer);
        DocumentDB.AddDocumentTypeToDataBase(documentType);


            documentType = new DocumentType("Письмо-обращение на имя Президента, Премьер - Министра, Минстрой РТ", Industries.GasSupply, Roles.Developer);
        DocumentDB.AddDocumentTypeToDataBase(documentType);

        documentType = new DocumentType("Задание на проектирование", Industries.GasSupply, Roles.Developer);
        DocumentDB.AddDocumentTypeToDataBase(documentType);

        documentType = new DocumentType("Ситуационный план (утвержденный исполкомом)", Industries.GasSupply, Roles.Developer);
        DocumentDB.AddDocumentTypeToDataBase(documentType);

        documentType = new DocumentType("Технические условия на присоединение кгазораспределительной сети (№, дата,срок действий Технических условий)", Industries.GasSupply, Roles.Developer);
        DocumentDB.AddDocumentTypeToDataBase(documentType);

        documentType = new DocumentType("Технический паспорт (план БТИ) объекта СКБ", Industries.GasSupply, Roles.Developer);
        DocumentDB.AddDocumentTypeToDataBase(documentType);

        documentType = new DocumentType("Технический паспорт (план БТИ) существующей котельной", Industries.GasSupply, Roles.Developer);
        DocumentDB.AddDocumentTypeToDataBase(documentType);

        documentType = new DocumentType("АКТ обследования объекта", Industries.GasSupply, Roles.Developer);
        DocumentDB.AddDocumentTypeToDataBase(documentType);

            documentType = new DocumentType("Технические условия на сети электроснабжение, водоснабжения, водоотведения при установке БМК", Industries.GasSupply, Roles.Developer);
        DocumentDB.AddDocumentTypeToDataBase(documentType);

        documentType = new DocumentType("Согласование посадки котельной ", Industries.GasSupply, Roles.Developer);
        DocumentDB.AddDocumentTypeToDataBase(documentType);



        documentType = new DocumentType("Диаметр (мм) трубопровода и протяженностьлинейного объекта (м)", Industries.WaterSupply, Roles.Designer);
        DocumentDB.AddDocumentTypeToDataBase(documentType);

        documentType = new DocumentType("Производительность БОС, м3/сут", Industries.WaterSupply, Roles.Designer);
        DocumentDB.AddDocumentTypeToDataBase(documentType);

        documentType = new DocumentType("кол.-во (шт) и производительность КНС (м3/ч)", Industries.WaterSupply, Roles.Designer);
        DocumentDB.AddDocumentTypeToDataBase(documentType);

        documentType = new DocumentType("Сметная стоимость работ, тыс. руб.", Industries.WaterSupply, Roles.Designer);
        DocumentDB.AddDocumentTypeToDataBase(documentType);

        documentType = new DocumentType("Срок разработки проектной документации, месяцев", Industries.WaterSupply, Roles.Designer);
        DocumentDB.AddDocumentTypeToDataBase(documentType);


        documentType = new DocumentType("Диаметр (мм) трубопровода и протяженностьлинейного объекта (м)", Industries.GasSupply, Roles.Designer);
        DocumentDB.AddDocumentTypeToDataBase(documentType);

        documentType = new DocumentType("Сметная стоимость работ, тыс. руб.", Industries.GasSupply, Roles.Designer);
        DocumentDB.AddDocumentTypeToDataBase(documentType);

        documentType = new DocumentType("Срок разработки проектной документации, месяцев", Industries.GasSupply, Roles.Designer);
        DocumentDB.AddDocumentTypeToDataBase(documentType);
    }
}