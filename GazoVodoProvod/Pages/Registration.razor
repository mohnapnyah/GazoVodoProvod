@page "/registration"
@using GazoVodoProvod.Data
<PageTitle>User Registration</PageTitle>
@inject NavigationManager navManager
@inject SingletonService singleton;

  <style>
   p.Message {
    background: #D9FFAD; 
    color: green;
    padding: 2px;
   }
   p.Kind{
		padding: 10px;
   }
  </style>

<h3>Registration</h3>
<div><p class="Message">@Message</p></div>
	<p>
		Login
		<input  type="text" name="login" @bind-value="@Login" />
	</p>
	<p>
		Password
		<input  type="password" @bind-value="@Password" />
	</p>
	<p>
		Password confirmation
		<input  type="password" @bind-value="@PasswordConfirmation" />
	</p>
	<p>
		Email
		<input  type="text" @bind-value="@Email" />
	</p>
	<p>
		FName
		<input  type="text" @bind-value="@FName" />
	</p>
	<p>
		LName
		<input  type="text" @bind-value="@LName" />
	</p>
	<p>
		Patronymic
		<input type="text" @bind-value="@Patronymic" />
	</p>
	<p>
		Phone
		<input type="text" @bind-value="@Phone" />
	</p>
<p>

</p>
	<p class="Kind">
		<button class="btn btn-primary" onclick="@CreateCustomer">Create Customer</button>

	<button class="btn btn-primary" onclick="@CreateDesigner">Create Designer</button>

	<button class="btn btn-primary" onclick="@CreateBuilder">Create Builder</button>
</p>

	<button class="btn btn-primary" @onclick="Authorization">Sign in</button>

	
@code {
	private string Login = "";
	private string Password = "";
	private string PasswordConfirmation = "";
	private string Email = "";
	private string FName ="";
	private string LName = "";
	private string Patronymic = "";
	private string Phone = "";
	private string Message = "";
	private string KindOfUser = "";
	private string ogrn = "";
	private void CreateCustomer()
	{ KindOfUser = "Customer"; CreateUser(); }
	private void CreateDesigner()
	{ KindOfUser = "Designer"; CreateUser(); }
	private void CreateBuilder()
	{ KindOfUser = "Builder"; CreateUser(); }
	private void CreateUser()
	{

		if (Login != "" && Email != "" && FName != "" && LName != "" && Password != "" && PasswordConfirmation != "" && Patronymic != "" && Phone != "")
		{
			if (MongoDb.FindUser(Login) == null)
			{
				if (Password == PasswordConfirmation)
				{
					User user = new User(Login, Password, FName, LName, Patronymic, Phone, Email);
					switch (KindOfUser)
					{
						case ("Builder"):
							user = new Builder(Login, Password, FName, LName, Patronymic, Phone, Email, "", "", "", "", "");
							break;
						case ("Designer"):
							user = new Designer(Login, Password, FName, LName, Patronymic, Phone, Email, "", "", "", "", "", "");
							break;
						case ("Customer"):
							user = new Customer(Login, Password, FName, LName, Patronymic, Phone, Email, "", "");
							break;
					}
					MongoDb.AddToDBUser(user);
					singleton.SetUser(user);
					switch (KindOfUser)
					{
						case("Builder"):
							navManager.NavigateTo("BuilderPage");
							break;
						case("Designer"):
							navManager.NavigateTo("DesignerPage");
							break;
						case("Customer"):
							navManager.NavigateTo("CustomerPage");
							break;
					}
				}
				else
				{
					Message = "Passwords do not match";
				}
			}
			else
			{
				Message = "Login already";
			}
		}
		else
		{
			Message = "Not all fields are filled.";
		}

	}
	private void Authorization()
	{
		navManager.NavigateTo("authorization");
	}
}